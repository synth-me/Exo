// Generated by LiveScript 1.6.0
(function(){
  var ref$, map, filter, zipAll, zip, head, all, last, Func, Obj, GenericAggregator, FilterSensorData, Report, logReport, PatternPipe, flowWith, Plumbing, Utilities, out$ = typeof exports != 'undefined' && exports || this;
  ref$ = require('prelude-ls'), map = ref$.map, filter = ref$.filter, zipAll = ref$.zipAll, zip = ref$.zip, head = ref$.head, all = ref$.all, last = ref$.last, Func = ref$.Func, Obj = ref$.Obj;
  GenericAggregator = Func.curry(function(name_log, current_data){
    return {
      name_log: name_log,
      current_data: current_data
    };
  });
  FilterSensorData = function(probe){
    return map(last)(
    function(it){
      return it.current_data;
    }(
    probe));
  };
  Report = Func.curry(function(warnKind, reviewStatus, logBody){
    return {
      warnKind: warnKind,
      reviewStatus: reviewStatus,
      logBody: logBody
    };
  });
  logReport = function(mode, warn, log){
    switch (false) {
    case mode !== 0:
      return Report(warn("Sucess", log));
    case mode !== 1:
      return Report(warn("Warning", log));
    case mode !== 2:
      return Report(warn("Redirect", log));
    }
  };
  PatternPipe = Func.curry(function(t, vf){
    return {
      test: t,
      pipeline: vf
    };
  });
  flowWith = Func.curry(function(pattern, value){
    return function(it){
      switch (false) {
      case it !== true:
        return map(function(x){
          return x(value);
        }, pattern.pipeline);
      default:
        return [];
      }
    }(
    all((function(it){
      return it === true;
    }))(
    map(function(x){
      return x(value);
    })(
    pattern.test)));
  });
  Plumbing = {
    PatternPipe: PatternPipe,
    flowWith: flowWith
  };
  Utilities = {
    GenericAggregator: GenericAggregator,
    Report: Report,
    logReport: logReport,
    FilterSensorData: FilterSensorData
  };
  out$.Plumbing = Plumbing;
}).call(this);
